#!/usr/bin/env python

import argparse
import io
import os
import sys
import json
import zipfile

from lxml import etree
import requests

aparser = argparse.ArgumentParser(description="Upload junit to reportportal")
aparser.add_argument(
    "--reportportal", help="URL of reportportal. default: REPORTPORTAL env", default=os.environ.get("REPORTPORTAL")
)
aparser.add_argument(
    "--project",
    help="reportportal project where to import. default: RP_PROJECT env",
    default=os.environ.get("RP_PROJECT"),
)
aparser.add_argument(
    "--launch-name",
    help="Desired launch name in reportportal. default: RP_LAUNCH_NAME env",
    default=os.environ.get("RP_LAUNCH_NAME", os.environ.get("RP_LAUNCH")),
)
aparser.add_argument(
    "--launch-description",
    help="Description of the imported launch. default: RP_LAUNCH_DESC env",
    default=os.environ.get("RP_LAUNCH_DESC", ""),
)
aparser.add_argument(
    "--ocp-version",
    help="OCP version of the cluster imported launch is from. default: OCP_VERSION env",
    default=os.environ.get("OCP_VERSION"),
)
aparser.add_argument("--token-variable", help="env variable with auth token. default: RP_TOKEN", default="RP_TOKEN")
aparser.add_argument("junitfile", nargs="+", help="junit file to import")
args = aparser.parse_args()

if not args.reportportal:
    sys.exit("You must define reportportal URL")
if not args.project:
    sys.exit("You must define reportportal project")
if not args.launch_name:
    sys.exit("You must define reportportal launch name")
if not args.token_variable:
    sys.exit("You must define correct token-variable")

stream = io.BytesIO()

xml = None
with zipfile.ZipFile(stream, mode="w", compression=zipfile.ZIP_DEFLATED) as azip:
    for junitfile in args.junitfile:
        if zipfile.is_zipfile(junitfile):
            with zipfile.ZipFile(junitfile) as inzip:
                for file in [i for i in zipfile.Path(inzip, at="archive/").iterdir() if i.name.startswith("junit-")]:
                    with file.open() as junit:
                        xml = etree.parse(junit)
                        content = etree.tostring(xml)
                        azip.writestr(file.name, content)
        else:
            xml = etree.parse(junitfile)
            content = etree.tostring(xml)
            azip.writestr(os.path.basename(junitfile), content)

token = os.environ[args.token_variable]
reportportal = args.reportportal.rstrip("/")

auth = {"Authorization": f"Bearer {token}"}
launch_import = f"{reportportal}/api/v1/{args.project}/launch/import"

launch_import_rq = {
    "attributes": [
        {"key": "skippedIsNotIssue", "system": True, "value": "true"},
    ],
    "description": args.launch_description,
}
launch_import_rq["attributes"].extend([{"key": "ocp", "value": args.ocp_version}] if args.ocp_version else [])

component_metadata_count = 0
if xml is not None:
    try:
        global_properties = xml.xpath("//testcase/properties/property")
        for prop in global_properties:
            name = prop.get("name", "")
            value = prop.get("value", "")
            if name.endswith(("-sha", "-tag")) or name in ["Kuadrant", "kuadrant_image", "kuadrant_cluster"]:
                launch_import_rq["attributes"].append({"key": name, "value": str(value)})
                component_metadata_count += 1
        
        if component_metadata_count > 0:
            print(f"Added {component_metadata_count} component metadata attributes from junit XML")
    except Exception as e:
        print(f"Warning: Failed to extract component metadata from junit XML: {e}")

print(
    requests.post(
        launch_import,
        files={
            "file": (f"{args.launch_name}.zip", stream.getbuffer(), "application/zip"),
            "launchImportRq": (None, json.dumps(launch_import_rq), "application/json"),
        },
        headers=auth,
    ).text
)