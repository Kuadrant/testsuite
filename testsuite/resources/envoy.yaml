apiVersion: template.openshift.io/v1
kind: Template
metadata:
  name: envoy-template
objects:
- apiVersion: v1
  kind: ConfigMap
  metadata:
    labels:
      app: ${LABEL}
    name: ${NAME}
  data:
    envoy.yaml: |
      static_resources:
        listeners:
        - address:
            socket_address:
              address: 0.0.0.0
              port_value: 8000
          filter_chains:
          - filters:
            - name: envoy.http_connection_manager
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                stat_prefix: local
                route_config:
                  name: local_route
                  virtual_hosts:
                  - name: local_service
                    domains: ['*']
                    typed_per_filter_config:
                      envoy.filters.http.ext_authz:
                        "@type": type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthzPerRoute
                        check_settings:
                          context_extensions:
                            virtual_host: local_service
                    routes:
                    - match: { prefix: / }
                      route:
                        cluster: httpbin
                http_filters:
                - name: envoy.filters.http.ext_authz
                  typed_config:
                    "@type": type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthz
                    transport_api_version: V3
                    failure_mode_allow: false
                    status_on_error: {code: 500}
                    include_peer_certificate: true
                    grpc_service:
                      envoy_grpc:
                        cluster_name: external_auth
                      timeout: 1s
                - name: envoy.filters.http.router
                  typed_config:
                    "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
                use_remote_address: true
        clusters:
        - name: external_auth
          connect_timeout: 0.25s
          type: strict_dns
          lb_policy: round_robin
          load_assignment:
            cluster_name: external_auth
            endpoints:
            - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: ${AUTHORINO_URL}
                      port_value: 50051
          typed_extension_protocol_options:
            envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
              "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
              upstream_http_protocol_options:
                auto_sni: true
              explicit_http_config:
                http2_protocol_options: {}
        - name: httpbin
          connect_timeout: 0.25s
          type: strict_dns
          lb_policy: round_robin
          load_assignment:
            cluster_name: httpbin
            endpoints:
            - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: ${UPSTREAM_URL}
                      port_value: 8080
      admin:
        address:
          socket_address:
            address: 0.0.0.0
            port_value: 8001
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: ${LABEL}
      svc: envoy
    name: ${NAME}
  spec:
    replicas: ${{REPLICAS}}
    selector:
      matchLabels:
        app: ${LABEL}
        svc: envoy
    template:
      metadata:
        labels:
          app: ${LABEL}
          svc: envoy
      spec:
        containers:
        - args:
          - --config-path /usr/local/etc/envoy/envoy.yaml
          - --service-cluster front-proxy
          - --log-level info
          - --component-log-level filter:trace,http:debug,router:debug
          command:
          - /usr/local/bin/envoy
          image: ${ENVOY_IMAGE}
          name: envoy
          ports:
          - containerPort: 8000
            name: web
          - containerPort: 8001
            name: admin
          volumeMounts:
          - mountPath: /usr/local/etc/envoy
            name: config
            readOnly: true
        volumes:
        - configMap:
            items:
            - key: envoy.yaml
              path: envoy.yaml
            name: ${NAME}
          name: config
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: ${LABEL}
    name: ${NAME}
  spec:
    ports:
    - name: web
      port: 8000
      protocol: TCP
    selector:
      app: ${LABEL}
      svc: envoy
- apiVersion: route.openshift.io/v1
  kind: Route
  metadata:
    name: ${NAME}
    labels:
      app: ${LABEL}
  spec:
    path: /
    to:
      kind: Service
      name: ${NAME}
    port:
      targetPort: 8000
parameters:
- name: NAME
  description: "Name for the resources created"
  required: true
- name: LABEL
  description: "App label for all resources"
  required: true
- name: AUTHORINO_URL
  description: "Authorino URL"
  required: true
- name: UPSTREAM_URL
  description: "URL for the upstream/backend"
  required: true
- name: ENVOY_IMAGE
  required: false
- name: REPLICAS
  description: "Number of envoy replicas"
  required: true
  value: "1"
